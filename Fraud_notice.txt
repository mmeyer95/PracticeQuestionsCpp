#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

double findMedian(vector<int> values, int d, bool odd){
    int sum=0;
    double median;
    int left=0, right=0;
    for (int i=0; i<values.size(); i++){
        sum+=values[i];
        if (odd){
            if (sum >= d/2.0){
                median = i;
                break;
            }
        }
        else {
            if (sum>=d/2 && !left){
                left = i;
            }
            if (sum>=d/2+1 && !right){
                right = i;
            }
            if (left && right){
                median = (left+right)/2.0;
            }
        }
    }
    return median;
}

// Complete the activityNotifications function below.
int activityNotifications(vector<int> expenditure, int d) {
    int notices = 0;
    bool odd = d%2;
    double median = 0;
    vector<int> values(*max_element(expenditure.begin(),expenditure.end())+1);
 
    //prime the first median value
    for (int i=0; i<d; i++){
        values[expenditure[i]]++;
    }
    median = findMedian(values, d, odd);

    //find the number of notices given
    for (int i=0; i<expenditure.size()-d; i++){
        if (expenditure[i+d]>=2*median){
            notices++;
        }
        //update counter vector
        values[expenditure[i]]--;
        values[expenditure[i+d]]++;
        //update median
        median = findMedian(values, d, odd);
    }
    return notices;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nd_temp;
    getline(cin, nd_temp);

    vector<string> nd = split_string(nd_temp);

    int n = stoi(nd[0]);

    int d = stoi(nd[1]);

    string expenditure_temp_temp;
    getline(cin, expenditure_temp_temp);

    vector<string> expenditure_temp = split_string(expenditure_temp_temp);

    vector<int> expenditure(n);

    for (int i = 0; i < n; i++) {
        int expenditure_item = stoi(expenditure_temp[i]);

        expenditure[i] = expenditure_item;
    }

    int result = activityNotifications(expenditure, d);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
